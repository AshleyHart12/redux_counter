{"ast":null,"code":"const INITIAL_DATA = [];\n\nconst counterReducer = (state = INITIAL_DATA, action) => {\n  switch (action.type) {\n    case 'ADDITEM':\n      return [...state, {\n        id: action.id,\n        text: action.text,\n        completed: false\n      }];\n\n    case 'TOGGLE_TODO':\n      return state.map(todo => todo.id === action.id ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n\n    case 'DELETE_ITEM':\n      const numIndex = parseInt(action.id);\n      return state.filter(todo => todo.id !== numIndex);\n\n    case 'INCREMENT':\n      return state + action.payload;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["/Users/ashinator/codePractice/redux_counter/src/reducers/counter.js"],"names":["INITIAL_DATA","counterReducer","state","action","type","id","text","completed","map","todo","numIndex","parseInt","filter","payload"],"mappings":"AAAA,MAAMA,YAAY,GAAG,EAArB;;AAEA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,SAAL;AACI,aAAO,CACH,GAAGF,KADA,EACM;AACLG,QAAAA,EAAE,EAAEF,MAAM,CAACE,EADN;AAELC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAFR;AAGLC,QAAAA,SAAS,EAAE;AAHN,OADN,CAAP;;AAOJ,SAAK,aAAL;AACI,aAAOL,KAAK,CAACM,GAAN,CAAUC,IAAI,IAAKA,IAAI,CAACJ,EAAL,KAAYF,MAAM,CAACE,EAApB,GAA0B,EAAC,GAAGI,IAAJ;AAAUF,QAAAA,SAAS,EAAE,CAACE,IAAI,CAACF;AAA3B,OAA1B,GAAkEE,IAApF,CAAP;;AACA,SAAK,aAAL;AACI,YAAMC,QAAQ,GAAGC,QAAQ,CAACR,MAAM,CAACE,EAAR,CAAzB;AACA,aAAOH,KAAK,CAACU,MAAN,CAAaH,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYK,QAAjC,CAAP;;AACR,SAAK,WAAL;AACI,aAAOR,KAAK,GAAGC,MAAM,CAACU,OAAtB;;AACJ,SAAK,WAAL;AACI,aAAOX,KAAK,GAAG,CAAf;;AACJ;AACI,aAAOA,KAAP;AAnBR;AAqBH,CAtBD;;AAwBA,eAAeD,cAAf","sourcesContent":["const INITIAL_DATA = []\n\nconst counterReducer = (state = INITIAL_DATA, action) => {\n    switch(action.type){\n        case 'ADDITEM':\n            return [\n                ...state,{\n                    id: action.id,\n                    text: action.text,\n                    completed: false,\n                }\n            ];\n        case 'TOGGLE_TODO':\n            return state.map(todo => (todo.id === action.id) ? {...todo, completed: !todo.completed} : todo);\n            case 'DELETE_ITEM':\n                const numIndex = parseInt(action.id)\n                return state.filter(todo => todo.id !== numIndex);\n        case 'INCREMENT':\n            return state + action.payload;\n        case 'DECREMENT':\n            return state - 1;\n        default:\n            return state;\n    }\n}\n\nexport default counterReducer;"]},"metadata":{},"sourceType":"module"}
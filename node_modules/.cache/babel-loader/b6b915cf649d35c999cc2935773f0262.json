{"ast":null,"code":"import { ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from '../actions/actionTypes';\nconst INITIAL_DATA = [];\n\nconst TodoReducer = (state = INITIAL_DATA, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [...state, {\n        id: action.id,\n        text: action.text,\n        completed: false\n      }];\n\n    case TOGGLE_TODO:\n      return state.map(todo => todo.id === action.id ? { ...todo,\n        completed: todo.completed\n      } : todo);\n\n    case REMOVE_TODO:\n      const numIndex = parseInt(action.id);\n      return state.filter(todo => todo.id !== numIndex);\n\n    default:\n      return state;\n  }\n};\n\nexport default TodoReducer;","map":{"version":3,"sources":["/Users/ashinator/codePractice/redux_counter/src/reducers/TodoReducer.js"],"names":["ADD_TODO","REMOVE_TODO","TOGGLE_TODO","INITIAL_DATA","TodoReducer","state","action","type","id","text","completed","map","todo","numIndex","parseInt","filter"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAmD,wBAAnD;AAEA,MAAMC,YAAY,GAAG,EAArB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACF,YAAP,EAAqBG,MAArB,KAAgC;AAChD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,QAAL;AACI,aAAO,CACH,GAAGK,KADA,EACM;AACLG,QAAAA,EAAE,EAAEF,MAAM,CAACE,EADN;AAELC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAFR;AAGLC,QAAAA,SAAS,EAAE;AAHN,OADN,CAAP;;AAOJ,SAAKR,WAAL;AACI,aAAOG,KAAK,CAACM,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYF,MAAM,CAACE,EAApB,GAA0B,EAAC,GAAGI,IAAJ;AAAUF,QAAAA,SAAS,EAAGE,IAAI,CAACF;AAA3B,OAA1B,GAAkEE,IAAnF,CAAP;;AACJ,SAAKX,WAAL;AACI,YAAMY,QAAQ,GAAGC,QAAQ,CAACR,MAAM,CAACE,EAAR,CAAzB;AACA,aAAOH,KAAK,CAACU,MAAN,CAAaH,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYK,QAAjC,CAAP;;AACJ;AACI,aAAOR,KAAP;AAfR;AAiBH,CAlBD;;AAoBA,eAAeD,WAAf","sourcesContent":["import { ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from '../actions/actionTypes'\n\nconst INITIAL_DATA = []\n\nconst TodoReducer = (state=INITIAL_DATA, action) => {\n    switch(action.type){\n        case ADD_TODO:\n            return [\n                ...state,{\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n        case TOGGLE_TODO:\n            return state.map(todo =>(todo.id === action.id) ? {...todo, completed : todo.completed} : todo)\n        case REMOVE_TODO:\n            const numIndex = parseInt(action.id)\n            return state.filter(todo => todo.id !== numIndex);\n        default:\n            return state\n    }\n}\n\nexport default TodoReducer;\n\n"]},"metadata":{},"sourceType":"module"}